// Generated by CoffeeScript 1.3.3
(function() {
  var DomUtils, root;

  DomUtils = {
    documentReady: (function() {
      var loaded;
      loaded = false;
      window.addEventListener("DOMContentLoaded", function() {
        return loaded = true;
      });
      return function(callback) {
        if (loaded) {
          return callback();
        } else {
          return window.addEventListener("DOMContentLoaded", callback);
        }
      };
    })(),
    makeXPath: function(elementArray) {
      var i, xpath;
      xpath = [];
      for (i in elementArray) {
        xpath.push("//" + elementArray[i], "//xhtml:" + elementArray[i]);
      }
      return xpath.join(" | ");
    },
    evaluateXPath: function(xpath, resultType) {
      var namespaceResolver;
      namespaceResolver = function(namespace) {
        if (namespace === "xhtml") {
          return "http://www.w3.org/1999/xhtml";
        } else {
          return null;
        }
      };
      return document.evaluate(xpath, document.documentElement, namespaceResolver, resultType, null);
    },
    getVisibleClientRect: function(element) {
      var childClientRect, childrenCount, clientRects, clientRectsLength, computedStyle, i, j, _i, _j, _k;
      clientRects = element.getClientRects();
      clientRectsLength = clientRects.length;
      for (i = _i = 0; 0 <= clientRectsLength ? _i < clientRectsLength : _i > clientRectsLength; i = 0 <= clientRectsLength ? ++_i : --_i) {
        if (clientRects[i].top < -2 || clientRects[i].top >= window.innerHeight - 4 || clientRects[i].left < -2 || clientRects[i].left >= window.innerWidth - 4) {
          continue;
        }
        if (clientRects[i].width < 3 || clientRects[i].height < 3) {
          continue;
        }
        computedStyle = window.getComputedStyle(element, null);
        if (computedStyle.getPropertyValue('visibility') !== 'visible' || computedStyle.getPropertyValue('display') === 'none') {
          continue;
        }
        return clientRects[i];
      }
      for (i = _j = 0; 0 <= clientRectsLength ? _j < clientRectsLength : _j > clientRectsLength; i = 0 <= clientRectsLength ? ++_j : --_j) {
        if (clientRects[i].width === 0 || clientRects[i].height === 0) {
          childrenCount = element.children.length;
          for (j = _k = 0; 0 <= childrenCount ? _k < childrenCount : _k > childrenCount; j = 0 <= childrenCount ? ++_k : --_k) {
            computedStyle = window.getComputedStyle(element.children[j], null);
            if (computedStyle.getPropertyValue('float') === 'none' && computedStyle.getPropertyValue('position') !== 'absolute') {
              continue;
            }
            childClientRect = this.getVisibleClientRect(element.children[j]);
            if (childClientRect === null) {
              continue;
            }
            return childClientRect;
          }
        }
      }
      return null;
    },
    isSelectable: function(element) {
      var selectableTypes;
      selectableTypes = ["search", "text", "password"];
      return (element.nodeName.toLowerCase() === "input" && selectableTypes.indexOf(element.type) >= 0) || element.nodeName.toLowerCase() === "textarea";
    },
    simulateSelect: function(element) {
      element.focus();
      return element.setSelectionRange(element.value.length, element.value.length);
    },
    simulateClick: function(element, modifiers) {
      var event, eventSequence, mouseEvent, _i, _len, _results;
      modifiers || (modifiers = {});
      eventSequence = ["mouseover", "mousedown", "mouseup", "click"];
      _results = [];
      for (_i = 0, _len = eventSequence.length; _i < _len; _i++) {
        event = eventSequence[_i];
        mouseEvent = document.createEvent("MouseEvents");
        mouseEvent.initMouseEvent(event, true, true, window, 1, 0, 0, 0, 0, modifiers.ctrlKey, false, false, modifiers.metaKey, 0, null);
        _results.push(element.dispatchEvent(mouseEvent));
      }
      return _results;
    },
    flashRect: function(rect) {
      var flashEl;
      flashEl = document.createElement("div");
      flashEl.id = "vimiumFlash";
      flashEl.className = "vimiumReset";
      flashEl.style.left = rect.left + window.scrollX + "px";
      flashEl.style.top = rect.top + window.scrollY + "px";
      flashEl.style.width = rect.width + "px";
      flashEl.style.height = rect.height + "px";
      document.body.appendChild(flashEl);
      return setTimeout((function() {
        return flashEl.parentNode.removeChild(flashEl);
      }), 400);
    }
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.DomUtils = DomUtils;

}).call(this);
