// Generated by CoffeeScript 1.3.3
(function() {
  var Class, Utils, globalRoot, root;

  Utils = {
    getCurrentVersion: function() {
      var manifestRequest;
      manifestRequest = new XMLHttpRequest();
      manifestRequest.open("GET", chrome.extension.getURL("manifest.json"), false);
      manifestRequest.send(null);
      return JSON.parse(manifestRequest.responseText).version;
    },
    invokeCommandString: function(str, argArray) {
      var component, components, func, obj, _i, _len, _ref;
      components = str.split('.');
      obj = window;
      _ref = components.slice(0, -1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        component = _ref[_i];
        obj = obj[component];
      }
      func = obj[components.pop()];
      return func.apply(obj, argArray);
    },
    createElementFromHtml: function(html) {
      var tmp;
      tmp = document.createElement("div");
      tmp.innerHTML = html;
      return tmp.firstChild;
    },
    escapeHtml: function(string) {
      return string.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    },
    createUniqueId: (function() {
      var id;
      id = 0;
      return function() {
        return id += 1;
      };
    })(),
    hasChromePrefix: function(url) {
      var chromePrefixes, prefix, _i, _len;
      chromePrefixes = ['about', 'view-source'];
      for (_i = 0, _len = chromePrefixes.length; _i < _len; _i++) {
        prefix = chromePrefixes[_i];
        if (url.startsWith(prefix)) {
          return true;
        }
      }
      return false;
    },
    createFullUrl: function(partialUrl) {
      if (!/^[a-z]{3,}:\/\//.test(partialUrl)) {
        return "http://" + partialUrl;
      } else {
        return partialUrl;
      }
    },
    isUrl: function(str) {
      var dottedParts, hostname, lastPart, longTlds, match, specialHostNames, urlRegex;
      urlRegex = new RegExp('^(?:([^:]+)(?::([^:]+))?@)?' + '([^:]+|\\[[^\\]]+\\])' + '(?::(\\d+))?$');
      longTlds = ['arpa', 'asia', 'coop', 'info', 'jobs', 'local', 'mobi', 'museum', 'name', 'onion'];
      specialHostNames = ['localhost'];
      if (/^[a-z]{3,}:\/\//.test(str)) {
        return true;
      }
      if (str.indexOf(' ') >= 0) {
        return false;
      }
      match = urlRegex.exec(str.split('/')[0]);
      if (!match) {
        return false;
      }
      hostname = match[3];
      if (specialHostNames.indexOf(hostname) >= 0) {
        return true;
      }
      if (hostname.indexOf(':') >= 0) {
        return true;
      }
      dottedParts = hostname.split('.');
      lastPart = dottedParts[dottedParts.length - 1];
      if (dottedParts.length > 1 && ((lastPart.length >= 2 && lastPart.length <= 3) || longTlds.indexOf(lastPart) >= 0)) {
        return true;
      }
      if (/^(\d{1,3}\.){3}\d{1,3}$/.test(hostname)) {
        return true;
      }
      return false;
    },
    createSearchUrl: function(query) {
      return "http://www.google.com/search?q=" + encodeURIComponent(query);
    },
    convertToUrl: function(string) {
      string = string.trim();
      if (Utils.hasChromePrefix(string)) {
        return string;
      } else {
        if (Utils.isUrl(string)) {
          return Utils.createFullUrl(string);
        } else {
          return Utils.createSearchUrl(string);
        }
      }
    }
  };

  Function.prototype.curry = function() {
    var fixedArguments, fn;
    fixedArguments = Array.copy(arguments);
    fn = this;
    return function() {
      return fn.apply(this, fixedArguments.concat(Array.copy(arguments)));
    };
  };

  Array.copy = function(array) {
    return Array.prototype.slice.call(array, 0);
  };

  String.prototype.startsWith = function(str) {
    return this.indexOf(str) === 0;
  };

  Class = {
    extend: function(properties) {
      var newClass;
      newClass = function() {
        if (this.init) {
          this.init.apply(this, arguments);
        }
        return null;
      };
      newClass.prototype = properties;
      newClass.constructor = newClass;
      return newClass;
    }
  };

  globalRoot = typeof window !== "undefined" && window !== null ? window : global;

  globalRoot.extend = function(hash1, hash2) {
    var key;
    for (key in hash2) {
      hash1[key] = hash2[key];
    }
    return hash1;
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Utils = Utils;

  root.Class = Class;

}).call(this);
